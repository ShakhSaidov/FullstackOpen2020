[{"D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\index.js":"1","D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\App.js":"2","D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\components\\Note.js":"3","D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\services\\notes.js":"4"},{"size":136,"mtime":1609011085262,"results":"5","hashOfConfig":"6"},{"size":2782,"mtime":1609013212114,"results":"7","hashOfConfig":"6"},{"size":320,"mtime":1609012447081,"results":"8","hashOfConfig":"6"},{"size":524,"mtime":1609355059372,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"rticmd",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\index.js",[],["21","22"],"D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\App.js",["23"],"import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Full Stack Open 2020 Part 2e</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportance = id => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\components\\Note.js",[],"D:\\CS\\- Projects\\- WD\\FullstackOpen2020\\Examples\\React\\src\\services\\notes.js",["24"],"import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":74,"column":11,"nodeType":"31","messageId":"32","endLine":74,"endColumn":14},{"ruleId":"33","severity":1,"message":"34","line":19,"column":1,"nodeType":"35","endLine":19,"endColumn":40},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'url' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]