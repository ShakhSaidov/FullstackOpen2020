{"version":3,"sources":["components/Search.js","components/ContactForm.js","components/Contacts.js","services/phonebook.js","App.js","index.js"],"names":["Search","props","value","onChange","handleSearchChange","ContactForm","onSubmit","addName","name","nameChange","number","numberChange","type","Contacts","contacts","handleDelete","map","contact","onClick","baseUrl","axios","get","then","response","data","newPerson","post","id","person","request","put","console","log","delete","Message","message","error","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","setMessage","setError","filter","toLowerCase","includes","useEffect","contactService","people","e","target","preventDefault","some","window","confirm","p","find","changedPerson","returnedPerson","setTimeout","catch","concat","event","contactToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f81ff809.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Search = (props) => {\r\n  return(\r\n    <div>\r\n      Contacts shown with <input value={props.value} onChange={props.handleSearchChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\n\r\nconst ContactForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.addName}>\r\n      <div>\r\n        name: <input value={props.name} onChange={props.nameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input value={props.number} onChange={props.numberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ContactForm","import React from 'react'\r\n\r\nconst Contacts = ({contacts, handleDelete}) => {\r\n  return(\r\n    contacts.map(contact =>\r\n      <div key={contact.name} onClick={handleDelete}>\r\n        {contact.name} {contact.number}\r\n        <button type=\"button\" value={contact.name}>delete</button>\r\n      </div>)\r\n  )\r\n}\r\n\r\nexport default Contacts","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst add = newPerson => {\r\n  const request = axios.post(baseUrl, newPerson)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, person) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, person)\r\n  console.log(\"This is axios request: \", request);\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, add, update, remove}","import React, { useState, useEffect } from 'react'\r\nimport Search from './components/Search'\r\nimport ContactForm from './components/ContactForm'\r\nimport Contacts from './components/Contacts'\r\nimport contactService from './services/phonebook'\r\n\r\nconst Message = ({ message, error }) => {\r\n  if (message === null) {\r\n    return (\r\n      null\r\n    )\r\n  }\r\n  else if (error) {\r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <div className=\"non-error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [newSearch, setNewSearch] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n  const [error, setError] = useState(false)\r\n\r\n  const contacts = persons.filter(person =>\r\n    person.name.toLowerCase().includes(newSearch.toLowerCase()))\r\n\r\n  const hook = () => {\r\n    console.log('effect')\r\n    contactService\r\n      .getAll()\r\n      .then(people => {\r\n        setPersons(people)\r\n      })\r\n  }\r\n  useEffect(hook, [])\r\n\r\n  const addName = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (persons.some(person => person.name === newName)) {\r\n      if (window.confirm(`${newName} is already added to phonebook! Do you want to replace the old number with a new one?`)) {\r\n        const p = persons.find(p => p.name === newName)\r\n        const changedPerson = { ...p, number: newNumber }\r\n        const id = p.id\r\n        console.log(\"This is the frontend\");\r\n        contactService\r\n          .update(id, changedPerson)\r\n          .then(returnedPerson => {\r\n            console.log(\"This is what axios returns: \", returnedPerson);\r\n            setPersons(persons.map(p => p.id !== id ? p : returnedPerson))\r\n            setMessage(\r\n              `New number put for ${newName}`\r\n            )\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 5000)\r\n          })\r\n          .catch(error => {\r\n            setMessage(\r\n              `Information of '${newName}' has already been removed from server`\r\n            )\r\n            console.log(\"The updated person: \", changedPerson);\r\n            console.log(\"The list now: \", persons);\r\n            setError(true)\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n              setError(false)\r\n            }, 5000)\r\n          })\r\n      }\r\n    } else {\r\n      const nameObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n\r\n      contactService\r\n        .add(nameObject)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson))\r\n          setNewName('')\r\n          setNewNumber('')\r\n          setMessage(\r\n            `Added ${newName} to the phonebook`\r\n          )\r\n          setTimeout(() => {\r\n            setMessage(null)\r\n          }, 5000)\r\n        })\r\n        .catch(error => {\r\n          setMessage(\r\n            `Information of '${newName}' has already been removed from server`\r\n          )\r\n          setError(true)\r\n          setTimeout(() => {\r\n            setMessage(null)\r\n            setError(false)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleSearchChange = (e) => {\r\n    setNewSearch(e.target.value)\r\n  }\r\n\r\n  const handleNameChange = (e) => {\r\n    setNewName(e.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (e) => {\r\n    setNewNumber(e.target.value)\r\n  }\r\n\r\n  const handleDelete = (e) => {\r\n    e.preventDefault()\r\n    const contactToDelete = persons.find(person => person.name === e.target.value)\r\n    if (window.confirm(`Delete ${contactToDelete.name} ?`)) {\r\n      contactService\r\n        .remove(contactToDelete.id)\r\n        .then(() =>\r\n          setPersons(persons.filter(p =>\r\n            p.name !== contactToDelete.name\r\n          ))\r\n        )\r\n\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Message message={message} error={error} />\r\n      <h2>Phonebook</h2>\r\n      <Search value={newSearch} handleSearchChange={handleSearchChange} />\r\n\r\n      <h3>Add Contact</h3>\r\n      <ContactForm addName={addName} name={newName} nameChange={handleNameChange}\r\n        number={newNumber} numberChange={handleNumberChange} />\r\n\r\n      <h3>Contacts</h3>\r\n      <Contacts contacts={contacts} handleDelete={(event) => handleDelete(event)} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}